[["welcome-to-ebio4100-bioinformatics-in-the-mountains.html", "EBIO4100: Bioinformatics in the Mountains Welcome to EBIO4100: Bioinformatics in the Mountains! 0.1 How to use this ebook 0.2 Goals/Learning Objectives 0.3 How to succeed in this course: 0.4 Important Links", " EBIO4100: Bioinformatics in the Mountains Megan Frayer 2025-07-08 Welcome to EBIO4100: Bioinformatics in the Mountains! Taught by Megan Frayer July 2025 0.1 How to use this ebook This text will outline the activities that we will complete each afternoon during the course. This book should remain available on my GitHub page after the class Canvas site goes away. Some extra information you will see in this text: Keep Learning! Boxes like these will indicate resources where you can learn more! These resources are not necessary for our course, and will not be part of assignments– they are just for your own learning. Caution! Boxes like these will indicate common pitfalls or places where we will make assumptions for simplicity that you should NOT make in real data. 0.2 Goals/Learning Objectives 0.3 How to succeed in this course: Bioinformatic software is always being improved. This means it is not important to memorize commands, but to understand the types of data and challenges you will face. This course is meant to give you a starting point for digging deeper into the questions and work that might interest you in the future. 0.4 Important Links CURC On-Demand Portal CURC Documentation CURC Cheatsheet "],["computer-set-up-and-introduction-to-the-command-line.html", "Activity 1 Computer set up and Introduction to the command line 1.1 Get oriented to the cluster 1.2 First command 1.3 How to navigate a file system 1.4 Basic file manipulation 1.5 Assignment 1.6 If we have extra time…", " Activity 1 Computer set up and Introduction to the command line This activity corresponds to Day 1 powerpoints available on Canvas. The first thing we need to do is make sure everyone can log onto the cluster. We will use the cluster for the rest of the activities in this course. 1.1 Get oriented to the cluster The first thing we will need to do is make an account. Everyone will need to set up an account following these instructions. A member of the CU Research Computing staff will be on call to help us this afternoon. Watch this video to learn about the Alpine filesystem. If you would like more information on the cluster, please see the documentation on their website. You can also refer here if you need help during the course! Overall Documentation CURC Cheatsheet Now that we have accounts, let’s log in! Go to the OpenOnDemand site, and use the menu at the top to access the Alpine Shell. 1.2 First command When you have accessed the Alpine shell, type echo \"Hello World!\". The argument will be printed below your command. Congratulations, you’ve run your first command! 1.3 How to navigate a file system We will now familiarize ourselves with the file system. 1. List the contents of your project folder. Code ls /projects/usrname/ 2. Make a new folder in projects called day_1 and switch your location into that folder. Code mkdir /projects/usrname/day_1 cd /projects/usrname/day_1 3. What is the file path to this location? Code pwd 4. What are the command options for ls? Code ls --help 1.4 Basic file manipulation 5. Copy the file day1.txt from our shared course folder to your day_1 folder. All the files that you need to complete activities during this course will be found in this location. Code cp /scratch/alpine/mefr3284/ebio4100/day_1/day_1.txt ./ 6. Rename the file to day_1_original.txt. Code mv day_1.txt day_1_original.txt 7. Look at the whole file, then at just the first 5 lines, then at just the last 5 lines. Code less day_1_original.txt head -5 day_1_original.txt tail -n5 day_1_original.txt 8. Count the lines of the file that contain the word “apple.” Code wc -l day_1_original.txt grep apple day_1_original.txt &gt; day_1_apples.txt wc -l day_1_apples.txt grep [aA]pple day_1_original.txt | wc -l **9. Replace all instances of the word “woodchuck” with “whistlepig”. Code sed &#39;s/woodchuck/whistlepig/g&#39; day_1_original.txt &gt; day_1_mod.txt 1.5 Assignment Write a command that makes a new file from day_1_original.txt that contains the first three lines with the word apple in them. Give the output file the name yourlastname_day1.txt and copy it to the shared folder Assignments/day_1. 1.6 If we have extra time… When running jobs on the cluster, we will typically use scripts. Watch this video from CURC. Make a script in your day_1 folder called count_apples.sh. Fill out the script using the command you created for the assignment. Run with with sbatch count_apples.sh. This will give you a job ID. Use that to run sacct -j &lt;job ID&gt;. "],["fasta-files-and-visual-alignment-with-mafft.html", "Activity 2 FASTA files and visual alignment with MAFFT 2.1 Exploring a fasta file 2.2 Visual Alignment 2.3 MAFFT Multiple Sequence Alignment 2.4 Assignment", " Activity 2 FASTA files and visual alignment with MAFFT 2.1 Exploring a fasta file 1. Start by making a new folder in your scratch directory and copying today’s file there. Code $ cd /scratch/alpine/usrname $ mkdir day_2 $ cp /scratch/alpine/mefr3284/ebio4100/day_2/* day_2/ $ ls 2. Look at the file. Code $ less chickadee.fasta How are the headers marked? What information is included there? 3. How many samples are included in this file? Code $ grep &quot;&gt;&quot; chickadee.fasta | wc -l 4. We can search for patterns within the data using grep. Code grep --color=always &#39;TAAACAA&#39; chickadee.fasta | head -10 grep --color=always &#39;TA[TA]TA&#39; chickadee.fasta | head -10 5. How many times does the pattern TAAACAA appear in these sequences? Code grep -o &#39;TAAACAA&#39; chickadee.fasta | wc -l 6. How many potential start codons are there? Hint: The “start codon” initiates translation of an amino acid chain. The RNA codon is AUG. Code grep -o &#39;ATG&#39; chickadee.fasta | wc -l The command grep is really powerful! If you’re interested in trying more grep commands, here’s a useful list of things you can do with grep. 7. How long are each of these sequences? This sounds like an easy question, but it is harder than it looks! We need to take into account: Each read is split across multiple lines. Each individual is represented by both an identifier line and a sequence line. We want to count only the length of the sequence lines, but associate them with the sample lines. Using what we have learned so far, this would be challenging. But I think it is useful to think about. The structure of the fasta file (and the possible variations on it) make things challenging, and this problem gets bigger as the file formats get more complicated. That is why in general, it is a great idea to use existing programs to process data, particularly ones that are well documented and have been thoroughly tested. Code Because I do not want to leave the question unanswered, here is a command that will work. It uses awk, which is a really useful linux program for processing. awk &#39;/^&gt;/{if (l!=&quot;&quot;) print l; print; l=0; next}{l+=length($0)}END{print l}&#39; chickadee.fasta 2.2 Visual Alignment 8. In pairs, try to align these two sequences by hand. These are protein sequences, so each letter represents an amino acid. How many ways can you align these? What if you allow gaps? 2.3 MAFFT Multiple Sequence Alignment Multiple sequence aligners do as the name suggests– align multiple sequences at once. There are a variety of algorithms implemented in a variety of programs that perform multiple alignment. Today, we will be using MAFFT (Multiple Alignment Fast Fourier Transform), which is one of the most popular programs and can implement multiple algorithms. Follow this link to the online implementation of MAFFT. We aren’t going to discuss the inner workings of multiple sequence alignment, but here is a video and two papers you can check out if you are interested. Lecture walking through the process An older but comprehensive comparison (Edgar and Batzoglou 2006) The most recent MAFFT paper (Katoh, Rozewicki, and Yamada 2019) 9. Copy and paste the sequences above into the text box and submit it. You should be able to use all of the default settings. Is this alignment the same one you came up with? 10. Now try running our chickadee dataset. You will need to download it from the cluster– I recommend using the OnDemand Portal. Look at the resulting alignment in the View tab. What has been added to the input data? Do you see any patterns in the data? (It’s okay if you don’t– this is a difficult way to look at data!) What other information can you get from MAFFT? 2.4 Assignment Download the new fasta file from MAFFT, and then upload it to the cluster using the OnDemand portal. Copy it to /scratch/alpine/mefr3284/Assignments/day_2/, adding your name to the file name. References Edgar, Robert C., and Serafim Batzoglou. 2006. “Multiple Sequence Alignment.” Current Opinion in Structural Biology 16 (3): 368–73. https://doi.org/https://doi.org/10.1016/j.sbi.2006.04.004. Katoh, Kazutaka, John Rozewicki, and Kazunori D Yamada. 2019. “MAFFT Online Service: Multiple Sequence Alignment, Interactive Sequence Choice and Visualization.” Briefings in Bioinformatics 20 (4): 1160–66. https://doi.org/10.1093/bib/bbx108. "],["references.html", "References", " References Edgar, Robert C., and Serafim Batzoglou. 2006. “Multiple Sequence Alignment.” Current Opinion in Structural Biology 16 (3): 368–73. https://doi.org/https://doi.org/10.1016/j.sbi.2006.04.004. Katoh, Kazutaka, John Rozewicki, and Kazunori D Yamada. 2019. “MAFFT Online Service: Multiple Sequence Alignment, Interactive Sequence Choice and Visualization.” Briefings in Bioinformatics 20 (4): 1160–66. https://doi.org/10.1093/bib/bbx108. "]]
