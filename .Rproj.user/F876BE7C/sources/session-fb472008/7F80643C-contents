# Activity 3: Alignment of whole genome data

## Explore the sequencing data and reference genome 

**1. Set up a folder for today's activity, and start an interactive job. **

```{cat, class.source='foldable'}
mkdir day3
#or
mkdir alignment 

sinteractive --partition=amilan -t 4:00:00
```

**2. Look at the data we will be using today. What kinds of file formats are these? What kind of information do they contain? **

```{cat, class.source='foldable'}
cd shared/genome_data/
less chickadee_1_R1.fastq
```

**3. How many files are in the folder? How many individual sequences does this correspond to? **

```{cat, class.source='foldable'}
# how many fastq files
ls *.fastq | wc -l 
# BUT these are paired end reads, so...
ls *_R1.fastq | wc -l 
```

**4. What files are present in the reference genome folder?**

```{cat, class.source='foldable'}
ls shared/reference
grep > ref.fna
```


## FASTQC 

**5. How many reads are in the first fastq file? **

```{cat, class.source='foldable'}
wc -l fastq # then divide by 4 
```

We can't go through all of this information by hand, so we need to start analyzing this data in other ways. For fastq files, we can check them using FastQC. 

**6. First, copy the file `mountain_chickadee_R1.fastq.gz` to your own scratch folder. **

```{cat, class.source='foldable'}
cp ebio4100/day3/mountain_chickadee_R*.fastq.gz /scratch/alpine/usrname/
```

**7. Run FastQC on the first file. **

```{cat, class.source='foldable'}
module load fastqc 
fastqc mountain_chickadee_R1.fastq.gz 
```

**8. What output files does it make? **

```{cat, class.source='foldable'}
ls
```

Take a look at the html output file (you may need to download it from the OnDemand Portal). How do the results look? 

If you want more information on any of the stats, check out the [documentation here.](https://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/)

**9. Repeat fastqc with the second set of reads. How do the results compare? **

```{cat, class.source='foldable'}
fastqc mountain_chickadee_R2.fastq.gz 
```

## Trimming 

**10. Use trimmomatic to trim the reads. **

When you load the module, it will give you cluster-specific instructions for running the program.

```{cat, class.source='foldable'}
module load trimmomatic 

java -jar $TRIMMOMATIC PE mountain_chickadee_R1.fastq.gz mountain_chickadee_R2.fastq.gz -trimlog mountain.trimlog -baseout mountain_chickadee_trimmed ILLUMINACLIP:$ADAPTERS/NexteraPE-PE.fa:2:30:10 LEADING:15 TRAILING:15 SLIDINGWINDOW:5:10 MINLEN:50
```


## Alignment with BWA 

**11. Align the reads with `bwa mem`. **

```{cat, class.source='foldable'}
bwa mem -t 1 -M -R '@RG\tID:moch21\tLB:moch21\tPL:ILLUMINA\tSM:moch21' /scratch/alpine/mefr3284/ebio4100/reference_genome/moch.dovetail.reference.hap1.scaffolds.renamed.fasta mountain_chickadee_trimmed_1P mountain_chickadee_trimmed_2P > mountain_chickadee.sam
```

We will name this sample `moch21`. Names for samples should be as simple as possible, while still being unique. They should not contain spaces.  

What output files were made? What format are these in? 

**12. We can now use the program `samtools` to further process this alignment file. First we can filter out low quality alignments. For most analyses, we filter the alignment for reads with an alignment quality above 20.**

```{cat, class.source='foldable'}
module load samtools 
samtools view -q 20 mountain_chickadee.sam > mountain_chickadee.filtered.sam
```

How much smaller is the file now?

```{cat, class.source='foldable'}
wc -l *sam
```

**13. If we look at this file, we will notice that the locations of the reads are random. For many downstream analyses, we will want to sort it. We can also do this with SAMtools. The `-T` flag specifies a prefix for temporary files created during sorting. **

```{cat, class.source='foldable'}
samtools sort mountain_chickadee.filtered.sam -T tmp_mntchck > mountain_chickadee.filtered.sorted.sam
```

If we look at the file now, we can see that the reads are in order by location. 

**14. There is a lot of information within this SAM file, and that means the file will get quite large as we add more reads. For this reason, we typically use the binary alternative: BAM files. We can ask `samtools` to create a BAM file rather than a SAM file. **

You will notice we have also created several versions of this SAM file. Sometimes, you will want to keep these intermediate files for special analyses, but usually we do not need them. You could delete them once you've made your final file, but you could also skip creating these files altogether by using pipes to connect our commands. The pipe (`|`) tells the terminal to pass the output directly into the next command, rather than into a file. 

```{cat, class.source='foldable'}
bwa mem -t 1 -M -R '@RG\tID:moch21\tLB:moch21\tPL:ILLUMINA\tSM:moch21' ../ebio4100/reference_genome/moch.dovetail.reference.hap1.scaffolds.renamed.fasta mountain_chickadee_trimmed_1P mountain_chickadee_trimmed_2P | samtools view -q 20 -b | samtools sort -T tmp_mntchck > mountain_chickadee.filtered.sorted.bam
```

Note that the `-b` flag added to the `samtools view` command is what tells `samtools` we want a BAM file output, rather than SAM. 

**15. Finally, most programs will expect BAM files to be indexed. This allows programs to quickly navigate large files. **

```{cat, class.source='foldable'}
samtools index mountain_chickadee.filtered.sorted.bam
```

We can also see that a new file called `mountain_chickadee.filtered.sorted.bam.bai` was created. This is the index and downstream programs will expect it to be in the same folder as the main file. 


## Read Groups 

Earlier we used the -R flag to add a string to our file. This was the read group. Some downstream programs will require read group information. If we want to merge BAM files together, we will also want the reads assigned to groups. If you do not add a group, or if a downstream program requires different group information, you can add or change read groups in a bam file. There are several ways to do this, but below is an example using `samtools`.  

```{cat, class.source='foldable'}

samtools addreplacerg -r "ID:HNJTWDSX3:2" -r "LB:2" -r "PL:ILLUMINA" -r "PU:HNJTWDSX3:2:moch21" -r "SM:moch21" mountain_chickadee.filtered.sorted.bam -o mountain_chickadee.filtered.sorted.newrg.bam 

samtools index mountain_chickadee.filtered.sorted.newrg.bam 

```

## How good was our alignment? 

**16. Use `samtools flagstat` to look at some metrics for our alignment. **

```{cat, class.source='foldable'}

samtools flagstat mountain_chickadee.filtered.sorted.bam > flagstat.txt

cat flagstat.txt

```


## Assignment 

Create a script that will copy the files `/projects/mefr3284/chickadee_data/MOCH/20H102_S21_L002_R1_001.fastq.gz` and `/projects/mefr3284/chickadee_data/MOCH/20H102_S21_L002_R2_001.fastq.gz` to your scratch directory, and then trim, align, and sort the bam file. You can also add the read group using the same read group information we used above. Try running the script, which will probably run past the end of class. Copy the script to the folder `/gpfs/alpine1/scratch/mefr3284/Assignments/day_3/` to turn it in. (Add your name to the file name!)

*Hint 1:*
```{cat, class.source='foldable'}
The header of your script should look something like: 
#!/bin/bash

#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --time=6:00:00
#SBATCH --partition=amilan 
#SBATCH --output=bamfiles.out
```

*Hint 2:*
```{cat, class.source='foldable'}
Do not forget to load the modules you need. 
```


::: {.learning data=latex=""}
If you would like more information on the programs we tried today, here are links to check out. 

[Samtools Documentation](https://www.htslib.org/doc/samtools.html)

[BCFtools Manual](https://samtools.github.io/bcftools/bcftools.html)

::: 